class Solution {
public:
    bool canCross(vector<int>& stones) {
        int n = stones.size();
        if (stones[1] != 1) return false; // First jump must be of size 1
        
        vector<vector<bool>> dp(n, vector<bool>(n + 1));
        dp[0][1] = true; // Start position

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                const int k=stones[i]-stones[j];
                if(k<=n && dp[j][k])
                {
                dp[i][k-1]=true;
                dp[i][k]=true;
                dp[i][k+1]=true;
            }
            }
        }

        // Check if any valid jump reaches the last stone
        return ranges::any_of(dp.back(), [](bool val) { return val; });
    }
};
