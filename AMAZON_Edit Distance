class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size();
        int n = word2.size();
        vector<vector<int>> memo(m + 1, vector<int>(n + 1, -1));
        return helper(word1, word2, m, n, memo);
    }

private:
    int helper(string& word1, string& word2, int m, int n, vector<vector<int>>& memo) {
        // Base cases
        if (m == 0) return n;
        if (n == 0) return m;

        // Check memoization table
        if (memo[m][n] != -1) return memo[m][n];

        // If last characters match, no operation needed
        if (word1[m - 1] == word2[n - 1]) {
            return memo[m][n] = helper(word1, word2, m - 1, n - 1, memo);
        }

        // Calculate costs of insert, delete, and replace operations
        int insertOp = 1 + helper(word1, word2, m, n - 1, memo);    // Insert
        int deleteOp = 1 + helper(word1, word2, m - 1, n, memo);    // Delete
        int replaceOp = 1 + helper(word1, word2, m - 1, n - 1, memo); // Replace

        // Take the minimum of the three operations
        return memo[m][n] = min({insertOp, deleteOp, replaceOp});
    }
};
